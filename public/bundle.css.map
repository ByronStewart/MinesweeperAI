{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\components\\MineSweeperBoard.svelte",
    "..\\src\\components\\MineTile.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import MinesweeperBoard from \"./components/MineSweeperBoard.svelte\";\n</script>\n\n<style>\n  h1 {\n    color: purple;\n  }\n</style>\n\n<h1>Minesweeper Baby</h1>\n<MinesweeperBoard />\n",
    "<script>\r\n  import MineTile from \"./MineTile.svelte\";\r\n  import { onMount } from \"svelte\";\r\n  import {\r\n    floodFill,\r\n    populateMines,\r\n    populateValues\r\n  } from \"../lib/algorithms.js\";\r\n  import { calculateRules, chooseSimpleMove } from \"../lib/ai.js\";\r\n\r\n  // board state will become a 2d array\r\n  let boardState = [];\r\n  let cols = 20;\r\n  let rows = 20;\r\n  let numMines = 50;\r\n  let apparentMinesRemaining = numMines;\r\n  let actualMinesRemaining = numMines;\r\n  let intervalId;\r\n\r\n  function resetGame() {\r\n    startGame();\r\n  }\r\n  $: rules = calculateRules(boardState, actualMinesRemaining);\r\n\r\n  function mapIdtoCoord(id) {\r\n    return {\r\n      y: id % rows,\r\n      x: Math.floor(id / rows)\r\n    };\r\n  }\r\n  function solveBoard() {\r\n    intervalId = setInterval(suggestMove, 50);\r\n  }\r\n  function stopSolver() {\r\n    clearInterval(intervalId);\r\n  }\r\n\r\n  function suggestMove() {\r\n    console.log(\"solving\");\r\n    const { idArr, toFlag, toReveal } = chooseSimpleMove(rules);\r\n    // if a simple move exists\r\n    if (idArr) {\r\n      for (let i = 0; i < idArr.length; i++) {\r\n        const { x, y } = mapIdtoCoord(idArr[i]);\r\n        if (toFlag) {\r\n          flagCell(x, y);\r\n        } else if (toReveal) {\r\n          revealCell(x, y);\r\n        }\r\n        //console.log(`move to id ${idArr[i]}`);\r\n        //console.log(`coordinates x: ${x}, y: ${y}`);\r\n      }\r\n    } else {\r\n      alert(\"no simple move remaining\");\r\n      console.log(rules);\r\n      clearInterval(intervalId);\r\n    }\r\n  }\r\n\r\n  function startGame() {\r\n    boardState = new Array(cols).fill().map((el, y) =>\r\n      new Array(rows).fill().map((el, x) => {\r\n        return {\r\n          id: y * rows + x,\r\n          isRevealed: false,\r\n          isMine: false,\r\n          isFlagged: false,\r\n          value: 10\r\n        };\r\n      })\r\n    );\r\n    boardState = populateMines(boardState, numMines);\r\n    boardState = populateValues(boardState);\r\n    apparentMinesRemaining = numMines;\r\n    actualMinesRemaining = numMines;\r\n  }\r\n  onMount(() => {\r\n    // create an empty board\r\n    startGame();\r\n  });\r\n  function flagCell(x, y) {\r\n    if (boardState[x][y].isFlagged) {\r\n      apparentMinesRemaining++;\r\n    } else {\r\n      apparentMinesRemaining--;\r\n    }\r\n    if (!boardState[x][y].isFlagged && boardState[x][y].isMine) {\r\n      actualMinesRemaining--;\r\n    } else if (boardState[x][y].isFlagged && boardState[x][y].isMine) {\r\n      actualMinesRemaining++;\r\n    }\r\n    boardState[x][y].isFlagged = !boardState[x][y].isFlagged;\r\n    boardState[x][y] = boardState[x][y];\r\n  }\r\n\r\n  function revealCell(x, y) {\r\n    if (boardState[x][y].value === 0) {\r\n      floodFill(boardState, x, y);\r\n    }\r\n    boardState[x][y].isRevealed = true;\r\n    boardState[x][y] = boardState[x][y];\r\n  }\r\n</script>\r\n\r\n<style>\r\n  .game-row {\r\n    display: flex;\r\n    flex-direction: row;\r\n    margin: 0;\r\n    padding: 0;\r\n    justify-items: flex-start;\r\n  }\r\n  .game-col {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-start;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n</style>\r\n\r\n<div class=\"menu\">\r\n  <form on:submit|preventDefault={resetGame}>\r\n    <!--     <label for=\"numMines\">Number of Mines:</label>\r\n    <input type=\"text\" name=\"numMines\" id=\"numMines\" />\r\n    <label for=\"numCols\">Number of Columns:</label>\r\n    <input type=\"text\" name=\"numCols\" id=\"numCols\" />\r\n    <label for=\"numRows\">Number of Rows:</label>\r\n    <input type=\"text\" name=\"numRows\" id=\"numRows\" /> -->\r\n    <button type=\"submit\">Reset</button>\r\n  </form>\r\n</div>\r\n<div>Mines remaining: {apparentMinesRemaining}</div>\r\n<button on:click={suggestMove}>Choose Move</button>\r\n<button on:click={solveBoard}>Solve Board</button>\r\n<button on:click={stopSolver}>Stop Solver</button>\r\n<div class=\"game-row\">\r\n  {#each boardState as row, x}\r\n    <div class=\"game-col\">\r\n      {#each row as cell, y}\r\n        <MineTile\r\n          on:cell-clicked={() => revealCell(x, y)}\r\n          on:cell-flagged={() => flagCell(x, y)}\r\n          isRevealed={cell.isRevealed}\r\n          isMine={cell.isMine}\r\n          isFlagged={cell.isFlagged}\r\n          value={cell.value}\r\n          id={cell.id} />\r\n      {/each}\r\n    </div>\r\n  {/each}\r\n</div>\r\n",
    "<script>\r\n  import { createEventDispatcher } from \"svelte\";\r\n  export let isRevealed;\r\n  export let value;\r\n  export let isMine;\r\n  export let id;\r\n  export let isFlagged;\r\n  const dispatch = createEventDispatcher();\r\n</script>\r\n\r\n<style>\r\n  .mine {\r\n    background-color: red;\r\n  }\r\n  .cell {\r\n    width: 30px;\r\n    height: 30px;\r\n    border: 1px solid black;\r\n    text-align: center;\r\n    line-height: 180%;\r\n  }\r\n  .revealed {\r\n    background-color: rgb(212, 212, 212);\r\n  }\r\n  .flagged {\r\n    background-color: rosybrown;\r\n  }\r\n</style>\r\n\r\n{#if isRevealed && isMine}\r\n  <div class=\"cell mine\">*</div>\r\n{:else if isRevealed}\r\n  <div class=\"cell revealed\">{value === 0 ? '' : value}</div>\r\n{:else if isFlagged}\r\n  <div\r\n    on:contextmenu|preventDefault={() => dispatch('cell-flagged')}\r\n    on:click={() => dispatch('cell-clicked')}\r\n    class=\"cell flagged\">\r\n    !!\r\n  </div>\r\n{:else}\r\n  <div\r\n    on:click={() => dispatch('cell-clicked')}\r\n    on:contextmenu|preventDefault={() => dispatch('cell-flagged')}\r\n    class=\"cell\" />\r\n{/if}\r\n"
  ],
  "names": [],
  "mappings": "AAKE,EAAE,eAAC,CAAC,AACF,KAAK,CAAE,MAAM,AACf,CAAC;ACkGD,SAAS,eAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,GAAG,CACnB,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,UAAU,AAC3B,CAAC,AACD,SAAS,eAAC,CAAC,AACT,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,UAAU,CAC3B,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACZ,CAAC;AC3GD,KAAK,eAAC,CAAC,AACL,gBAAgB,CAAE,GAAG,AACvB,CAAC,AACD,KAAK,eAAC,CAAC,AACL,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CACvB,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,SAAS,eAAC,CAAC,AACT,gBAAgB,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AACtC,CAAC,AACD,QAAQ,eAAC,CAAC,AACR,gBAAgB,CAAE,SAAS,AAC7B,CAAC"
}